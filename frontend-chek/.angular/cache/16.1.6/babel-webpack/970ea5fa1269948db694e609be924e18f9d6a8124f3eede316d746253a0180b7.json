{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Claudio/Desktop/pruebas_tecnicas/Chek/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isLoggedIn = false;\n    this.email = ''; // Almacena el nombre de usuario o las credenciales aquí\n  }\n\n  login(email, password) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (email && password) {\n        try {\n          const response = yield _this.http.post('http://localhost:3000/api/login', {\n            email,\n            password\n          }).pipe(tap(response => console.log('Token JWT:', response.token)), map(response => response.token), catchError(error => {\n            console.error('Error de inicio de sesión:', error);\n            return throwError(error);\n          })).toPromise();\n          if (response) {\n            _this.email = email; // Podrías guardar el nombre de usuario o las credenciales aquí si lo deseas\n            _this.isLoggedIn = true;\n            _this.router.navigate(['/home']);\n            // También, aquí normalmente guardarías el token o la información del usuario en LocalStorage o SessionStorage.\n            return true;\n          } else {\n            console.error('Respuesta vacía del servidor');\n            return false;\n          }\n        } catch (error) {\n          console.error('Error de inicio de sesión:', error);\n          return false;\n        }\n      } else {\n        return false;\n      }\n    })();\n  }\n  logout() {\n    this.isLoggedIn = false;\n    this.email = '';\n    // Aquí, normalmente eliminarías el token o la información del usuario almacenada.\n  }\n\n  isAuthenticated() {\n    return this.isLoggedIn;\n  }\n  getUsername() {\n    return this.email;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","tap","throwError","AuthService","constructor","http","router","isLoggedIn","email","login","password","_this","_asyncToGenerator","response","post","pipe","console","log","token","error","toPromise","navigate","logout","isAuthenticated","getUsername","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Claudio\\Desktop\\pruebas_tecnicas\\Chek\\src\\app\\auth.service.ts"],"sourcesContent":["// auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { Router } from '@angular/router'; // Importa el servicio Router\n\ninterface LoginResponse {\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private isLoggedIn = false;\n  private email = ''; // Almacena el nombre de usuario o las credenciales aquí\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  async login(email: string, password: string): Promise<boolean> {\n    if (email && password) {\n      try {\n        const response = await this.http\n          .post<LoginResponse>('http://localhost:3000/api/login', { email, password })\n          .pipe(\n            tap(response => console.log('Token JWT:', response.token)),\n            map(response => response.token),\n            catchError(error => {\n              console.error('Error de inicio de sesión:', error);\n              return throwError(error);\n            })\n          )\n          .toPromise();\n\n        if (response) {\n          this.email = email; // Podrías guardar el nombre de usuario o las credenciales aquí si lo deseas\n          this.isLoggedIn = true;\n          this.router.navigate(['/home']);\n          // También, aquí normalmente guardarías el token o la información del usuario en LocalStorage o SessionStorage.\n          return true;\n        } else {\n          console.error('Respuesta vacía del servidor');\n          return false;\n        }\n      } catch (error) {\n        console.error('Error de inicio de sesión:', error);\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  logout() {\n    this.isLoggedIn = false;\n    this.email = '';\n    // Aquí, normalmente eliminarías el token o la información del usuario almacenada.\n  }\n\n  isAuthenticated(): boolean {\n    return this.isLoggedIn;\n  }\n\n  getUsername(): string {\n    return this.email;\n  }\n}\n"],"mappings":";AAGA,SAASA,UAAU,EAAEC,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;AACrD,SAASC,UAAU,QAAQ,MAAM;;;;AAUjC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAH5C,KAAAC,UAAU,GAAG,KAAK;IAClB,KAAAC,KAAK,GAAG,EAAE,CAAC,CAAC;EAE2C;;EAEzDC,KAAKA,CAACD,KAAa,EAAEE,QAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACzC,IAAIJ,KAAK,IAAIE,QAAQ,EAAE;QACrB,IAAI;UACF,MAAMG,QAAQ,SAASF,KAAI,CAACN,IAAI,CAC7BS,IAAI,CAAgB,iCAAiC,EAAE;YAAEN,KAAK;YAAEE;UAAQ,CAAE,CAAC,CAC3EK,IAAI,CACHd,GAAG,CAACY,QAAQ,IAAIG,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,QAAQ,CAACK,KAAK,CAAC,CAAC,EAC1DlB,GAAG,CAACa,QAAQ,IAAIA,QAAQ,CAACK,KAAK,CAAC,EAC/BnB,UAAU,CAACoB,KAAK,IAAG;YACjBH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;YAClD,OAAOjB,UAAU,CAACiB,KAAK,CAAC;UAC1B,CAAC,CAAC,CACH,CACAC,SAAS,EAAE;UAEd,IAAIP,QAAQ,EAAE;YACZF,KAAI,CAACH,KAAK,GAAGA,KAAK,CAAC,CAAC;YACpBG,KAAI,CAACJ,UAAU,GAAG,IAAI;YACtBI,KAAI,CAACL,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;YAC/B;YACA,OAAO,IAAI;WACZ,MAAM;YACLL,OAAO,CAACG,KAAK,CAAC,8BAA8B,CAAC;YAC7C,OAAO,KAAK;;SAEf,CAAC,OAAOA,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClD,OAAO,KAAK;;OAEf,MAAM;QACL,OAAO,KAAK;;IACb;EACH;EAEAG,MAAMA,CAAA;IACJ,IAAI,CAACf,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf;EACF;;EAEAe,eAAeA,CAAA;IACb,OAAO,IAAI,CAAChB,UAAU;EACxB;EAEAiB,WAAWA,CAAA;IACT,OAAO,IAAI,CAAChB,KAAK;EACnB;;AApDWL,WAAW,C;mBAAXA,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAX3B,WAAW,C;SAAXA,WAAW;EAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
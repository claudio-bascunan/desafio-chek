{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivateChild(next, state) {\n    // Verificar si el token de acceso está presente en el LocalStorage\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      // El usuario está autenticado y se le permite acceder a la ruta\n      return true;\n    } else {\n      // El usuario no está autenticado, redirigirlo al componente de login\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivateChild","next","state","token","localStorage","getItem","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Claudio\\Desktop\\pruebas_tecnicas\\Chek\\src\\app\\auth.guard.ts"],"sourcesContent":["// auth.guard.ts\n\nimport { Injectable } from '@angular/core';\nimport { CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivateChild {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivateChild(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n    // Verificar si el token de acceso está presente en el LocalStorage\n    const token = localStorage.getItem('access_token');\n\n    if (token) {\n      // El usuario está autenticado y se le permite acceder a la ruta\n      return true;\n    } else {\n      // El usuario no está autenticado, redirigirlo al componente de login\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n"],"mappings":";;;AASA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAY;EAExEC,gBAAgBA,CACdC,IAA4B,EAC5BC,KAA0B;IAC1B;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAElD,IAAIF,KAAK,EAAE;MACT;MACA,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;AAlBWV,SAAS,C;mBAATA,SAAS,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAThB,SAAS,C;SAATA,SAAS;EAAAiB,OAAA,EAATjB,SAAS,CAAAkB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
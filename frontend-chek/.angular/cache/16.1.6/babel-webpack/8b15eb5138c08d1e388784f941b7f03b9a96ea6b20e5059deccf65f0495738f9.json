{"ast":null,"code":"// login.component.ts\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(http) {\n    this.http = http;\n    this.username = '';\n    this.password = '';\n  }\n  login() {\n    if (this.username && this.password) {\n      // Hacer una solicitud de inicio de sesión al Backend\n      this.http.post('http://localhost:3000/api/login', {\n        username: this.username,\n        password: this.password\n      }).subscribe(response => {\n        // Si la solicitud es exitosa, el Backend enviará un token JWT\n        // Aquí puedes guardar el token en el LocalStorage o en una cookie para su uso posterior.\n        console.log('Token JWT:', response.token);\n        alert('Inicio de sesión exitoso');\n        // Redirigir al usuario al dashboard u otra página después del inicio de sesión exitoso.\n      }, error => {\n        console.error('Error de inicio de sesión:', error);\n        alert('Inicio de sesión fallido. Por favor, verifique sus credenciales.');\n      });\n    } else {\n      alert('Por favor, ingrese usuario y contraseña válidos');\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","LoginComponent","constructor","http","username","password","login","post","subscribe","response","console","log","token","alert","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Claudio\\Desktop\\pruebas_tecnicas\\Chek\\src\\app\\login\\login.component.ts"],"sourcesContent":["// login.component.ts\n\nimport { Component } from '@angular/core';\nimport { AuthService } from '../auth.service';\n\ndeclare const gapi: any;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  username: string = '';\n  password: string = '';\n\n  constructor(private http: HttpClient) {}\n\n  login() {\n    if (this.username && this.password) {\n      // Hacer una solicitud de inicio de sesión al Backend\n      this.http.post<LoginResponse>('http://localhost:3000/api/login', { username: this.username, password: this.password })\n        .subscribe(\n          (response) => {\n            // Si la solicitud es exitosa, el Backend enviará un token JWT\n            // Aquí puedes guardar el token en el LocalStorage o en una cookie para su uso posterior.\n            console.log('Token JWT:', response.token);\n            alert('Inicio de sesión exitoso');\n            // Redirigir al usuario al dashboard u otra página después del inicio de sesión exitoso.\n          },\n          (error) => {\n            console.error('Error de inicio de sesión:', error);\n            alert('Inicio de sesión fallido. Por favor, verifique sus credenciales.');\n          }\n        );\n    } else {\n      alert('Por favor, ingrese usuario y contraseña válidos');\n    }\n  }\n}"],"mappings":"AAAA;;AAEA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,EAAE;EAEkB;EAEvCC,KAAKA,CAAA;IACH,IAAI,IAAI,CAACF,QAAQ,IAAI,IAAI,CAACC,QAAQ,EAAE;MAClC;MACA,IAAI,CAACF,IAAI,CAACI,IAAI,CAAgB,iCAAiC,EAAE;QAAEH,QAAQ,EAAE,IAAI,CAACA,QAAQ;QAAEC,QAAQ,EAAE,IAAI,CAACA;MAAQ,CAAE,CAAC,CACnHG,SAAS,CACPC,QAAQ,IAAI;QACX;QACA;QACAC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,QAAQ,CAACG,KAAK,CAAC;QACzCC,KAAK,CAAC,0BAA0B,CAAC;QACjC;MACF,CAAC,EACAC,KAAK,IAAI;QACRJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDD,KAAK,CAAC,kEAAkE,CAAC;MAC3E,CAAC,CACF;KACJ,MAAM;MACLA,KAAK,CAAC,iDAAiD,CAAC;;EAE5D;CACD;AA3BYZ,cAAc,GAAAc,UAAA,EAL1Bf,SAAS,CAAC;EACTgB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWjB,cAAc,CA2B1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
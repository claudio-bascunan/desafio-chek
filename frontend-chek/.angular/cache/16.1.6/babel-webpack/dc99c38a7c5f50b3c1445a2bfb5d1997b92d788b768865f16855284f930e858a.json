{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Claudio/Desktop/pruebas_tecnicas/Chek/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ForgotPasswordComponent = class ForgotPasswordComponent {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.email = '';\n    this.resetStatus = '';\n    this.showAlert = false;\n    this.alertType = 'success';\n    this.alertMessage = '';\n  }\n  sendRecovery() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.isValidEmail(_this.email)) {\n        _this.showAlertMessage('Por favor, ingresa un correo electrónico válido.', 'error');\n        return;\n      }\n      const resetData = {\n        email: _this.email\n      };\n      try {\n        const response = yield _this.http.post('http://localhost:3000/api/restablecer-contrasena', resetData).toPromise();\n        _this.showAlertMessage(`Se ha enviado un correo electrónico ${_this.email} para restablecer la clave.`, 'success');\n        setTimeout(() => {\n          _this.showAlert = false;\n        }, 3000);\n      } catch (error) {\n        console.error('Error al enviar el correo:', error);\n        _this.showAlertMessage('Ha ocurrido un problema al enviar el correo electrónico.', 'error');\n      }\n    })();\n  }\n  isValidEmail(email) {\n    // Expresión regular para validar el correo electrónico\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);\n  }\n  showAlertMessage(message, type) {\n    this.alertMessage = message;\n    this.alertType = type;\n    this.showAlert = true;\n    setTimeout(() => {\n      this.router.navigate(['/login']);\n    }, 5000);\n  }\n};\nForgotPasswordComponent = __decorate([Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css']\n})], ForgotPasswordComponent);","map":{"version":3,"names":["Component","ForgotPasswordComponent","constructor","http","router","email","resetStatus","showAlert","alertType","alertMessage","sendRecovery","_this","_asyncToGenerator","isValidEmail","showAlertMessage","resetData","response","post","toPromise","setTimeout","error","console","emailRegex","test","message","type","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Claudio\\Desktop\\pruebas_tecnicas\\Chek\\src\\app\\forgot-password\\forgot-password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css'],\n})\nexport class ForgotPasswordComponent {\n  email: string = '';\n  resetStatus: string = '';\n  showAlert: boolean = false;\n  alertType: 'success' | 'error' = 'success';\n  alertMessage: string = '';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  async sendRecovery(): Promise<void> {\n    if (!this.isValidEmail(this.email)) {\n      this.showAlertMessage('Por favor, ingresa un correo electrónico válido.', 'error');\n      return;\n    }\n\n    const resetData = { email: this.email };\n    try {\n      const response = await this.http.post<any>('http://localhost:3000/api/restablecer-contrasena', resetData).toPromise();\n      this.showAlertMessage(`Se ha enviado un correo electrónico ${this.email} para restablecer la clave.`, 'success');\n      setTimeout(() => {\n        this.showAlert = false;\n      }, 3000);\n    } catch (error) {\n      console.error('Error al enviar el correo:', error);\n      this.showAlertMessage('Ha ocurrido un problema al enviar el correo electrónico.', 'error');\n    }\n  }\n\n  isValidEmail(email: string): boolean {\n    // Expresión regular para validar el correo electrónico\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);\n  }\n\n  showAlertMessage(message: string, type: 'success' | 'error') {\n    this.alertMessage = message;\n    this.alertType = type;\n    this.showAlert = true;\n\n  setTimeout(() => {\n    this.router.navigate(['/login']);\n  }, 5000);\n  }\n}\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAOlCC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IANpD,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,WAAW,GAAW,EAAE;IACxB,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAC,SAAS,GAAwB,SAAS;IAC1C,KAAAC,YAAY,GAAW,EAAE;EAEsC;EAEzDC,YAAYA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAChB,IAAI,CAACD,KAAI,CAACE,YAAY,CAACF,KAAI,CAACN,KAAK,CAAC,EAAE;QAClCM,KAAI,CAACG,gBAAgB,CAAC,kDAAkD,EAAE,OAAO,CAAC;QAClF;;MAGF,MAAMC,SAAS,GAAG;QAAEV,KAAK,EAAEM,KAAI,CAACN;MAAK,CAAE;MACvC,IAAI;QACF,MAAMW,QAAQ,SAASL,KAAI,CAACR,IAAI,CAACc,IAAI,CAAM,kDAAkD,EAAEF,SAAS,CAAC,CAACG,SAAS,EAAE;QACrHP,KAAI,CAACG,gBAAgB,CAAC,uCAAuCH,KAAI,CAACN,KAAK,6BAA6B,EAAE,SAAS,CAAC;QAChHc,UAAU,CAAC,MAAK;UACdR,KAAI,CAACJ,SAAS,GAAG,KAAK;QACxB,CAAC,EAAE,IAAI,CAAC;OACT,CAAC,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDT,KAAI,CAACG,gBAAgB,CAAC,0DAA0D,EAAE,OAAO,CAAC;;IAC3F;EACH;EAEAD,YAAYA,CAACR,KAAa;IACxB;IACA,MAAMiB,UAAU,GAAG,kDAAkD;IACrE,OAAOA,UAAU,CAACC,IAAI,CAAClB,KAAK,CAAC;EAC/B;EAEAS,gBAAgBA,CAACU,OAAe,EAAEC,IAAyB;IACzD,IAAI,CAAChB,YAAY,GAAGe,OAAO;IAC3B,IAAI,CAAChB,SAAS,GAAGiB,IAAI;IACrB,IAAI,CAAClB,SAAS,GAAG,IAAI;IAEvBY,UAAU,CAAC,MAAK;MACd,IAAI,CAACf,MAAM,CAACsB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,EAAE,IAAI,CAAC;EACR;CACD;AA3CYzB,uBAAuB,GAAA0B,UAAA,EALnC3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACW7B,uBAAuB,CA2CnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
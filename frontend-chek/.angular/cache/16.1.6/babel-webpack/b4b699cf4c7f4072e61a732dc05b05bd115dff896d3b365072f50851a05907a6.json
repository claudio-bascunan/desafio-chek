{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate() {\n    // Verificar si el token de acceso está presente en el LocalStorage\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      // El usuario está autenticado y se le permite acceder a la ruta\n      return true;\n    } else {\n      // El usuario no está autenticado, redirigirlo al componente de login\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","router","canActivate","token","localStorage","getItem","navigate","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Claudio\\Desktop\\pruebas_tecnicas\\Chek\\src\\app\\auth.guard.ts"],"sourcesContent":["// auth.guard.ts\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private router: Router) { }\n\n  canActivate(): boolean {\n    // Verificar si el token de acceso está presente en el LocalStorage\n    const token = localStorage.getItem('access_token');\n\n    if (token) {\n      // El usuario está autenticado y se le permite acceder a la ruta\n      return true;\n    } else {\n      // El usuario no está autenticado, redirigirlo al componente de login\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAY;EAEtCC,WAAWA,CAAA;IACT;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAElD,IAAIF,KAAK,EAAE;MACT;MACA,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACF,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;AAhBWP,SAAS,C;mBAATA,SAAS,EAAAQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAATX,SAAS,C;SAATA,SAAS;EAAAY,OAAA,EAATZ,SAAS,CAAAa,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
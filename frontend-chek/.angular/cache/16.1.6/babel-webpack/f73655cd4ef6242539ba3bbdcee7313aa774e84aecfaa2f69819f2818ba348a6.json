{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Claudio/Desktop/pruebas_tecnicas/Chek/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/forms\";\nexport class ResetPasswordComponent {\n  constructor(route, http, router) {\n    this.route = route;\n    this.http = http;\n    this.router = router;\n    this.token = ''; // Inicializar token con un valor vacío\n    this.password = '';\n    this.validatePassword = '';\n    this.resetStatus = '';\n  }\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      this.token = params['token'];\n    });\n  }\n  resetPassword() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.token && _this.password && _this.validatePassword) {\n        if (_this.password === _this.validatePassword) {\n          const resetData = {\n            token: _this.token,\n            password: _this.password\n          };\n          try {\n            yield _this.http.post('http://localhost:3000/api/cambiar-contrasena', resetData).toPromise();\n            _this.resetStatus = 'Contraseña restablecida exitosamente.';\n            _this.router.navigate(['/login']); // Redirige al usuario a la página de inicio de sesión\n          } catch (error) {\n            console.error('Error al restablecer la contraseña:', error);\n            _this.resetStatus = 'Error al restablecer la contraseña.';\n          }\n        } else {\n          _this.resetStatus = 'Las contraseñas no coinciden.';\n        }\n      } else {\n        _this.resetStatus = 'Falta información para restablecer la contraseña.';\n      }\n    })();\n  }\n}\nResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i1.Router));\n};\nResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetPasswordComponent,\n  selectors: [[\"app-reset-password\"]],\n  decls: 15,\n  vars: 2,\n  consts: [[1, \"container\"], [1, \"login-form\"], [1, \"tittle-container\"], [1, \"reset-password-title\"], [1, \"input-container\"], [\"type\", \"password\", \"placeholder\", \"Clave nueva\", \"name\", \"password\", \"id\", \"password\", 1, \"password-input\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"password\", \"placeholder\", \"Confirmar clave nueva\", \"name\", \"validatePassword\", \"id\", \"validatePassword\", 1, \"register-input\", 3, \"ngModel\", \"ngModelChange\"], [1, \"forgot-password-button\", 3, \"click\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n      i0.ɵɵtext(4, \"Restablecer contrase\\u00F1a\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function ResetPasswordComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.password = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 4)(8, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function ResetPasswordComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.validatePassword = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 4)(10, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function ResetPasswordComponent_Template_button_click_10_listener() {\n        return ctx.resetPassword();\n      });\n      i0.ɵɵtext(11, \"Enviar\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"footer\")(13, \"p\");\n      i0.ɵɵtext(14, \"\\u00A9 Desaf\\u00EDo T\\u00E9cnico Chek Agosto 2023 - Claudio Andr\\u00E9s Bascu\\u00F1\\u00E1n Valdivia\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.password);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.validatePassword);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["ResetPasswordComponent","constructor","route","http","router","token","password","validatePassword","resetStatus","ngOnInit","queryParams","subscribe","params","resetPassword","_this","_asyncToGenerator","resetData","post","toPromise","navigate","error","console","i0","ɵɵdirectiveInject","i1","ActivatedRoute","i2","HttpClient","Router","selectors","decls","vars","consts","template","ResetPasswordComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ResetPasswordComponent_Template_input_ngModelChange_6_listener","$event","ResetPasswordComponent_Template_input_ngModelChange_8_listener","ResetPasswordComponent_Template_button_click_10_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\Claudio\\Desktop\\pruebas_tecnicas\\Chek\\src\\app\\reset-password\\reset-password.component.ts","C:\\Users\\Claudio\\Desktop\\pruebas_tecnicas\\Chek\\src\\app\\reset-password\\reset-password.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css'],\n})\nexport class ResetPasswordComponent implements OnInit {\n  token: string = ''; // Inicializar token con un valor vacío\n  password: string = '';\n  validatePassword: string = '';\n  resetStatus: string = '';\n\n  constructor(private route: ActivatedRoute, private http: HttpClient, private router: Router) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params) => {\n      this.token = params['token'];\n    });\n  }\n\n  async resetPassword() {\n    if (this.token && this.password && this.validatePassword) {\n      if (this.password === this.validatePassword) {\n        const resetData = { token: this.token, password: this.password };\n        try {\n          await this.http.post('http://localhost:3000/api/cambiar-contrasena', resetData).toPromise();\n          this.resetStatus = 'Contraseña restablecida exitosamente.';\n          this.router.navigate(['/login']); // Redirige al usuario a la página de inicio de sesión\n        } catch (error) {\n          console.error('Error al restablecer la contraseña:', error);\n          this.resetStatus = 'Error al restablecer la contraseña.';\n        }\n      } else {\n        this.resetStatus = 'Las contraseñas no coinciden.';\n      }\n    } else {\n      this.resetStatus = 'Falta información para restablecer la contraseña.';\n    }\n  }\n}\n","<div class=\"container\">\n  <form class=\"login-form\">\n    <div class=\"tittle-container\">\n      <h1 class=\"reset-password-title\">Restablecer contraseña</h1>\n    </div>\n    <div class=\"input-container\">\n      <input type=\"password\" placeholder=\"Clave nueva\" name=\"password\" id=\"password\" [(ngModel)]=\"password\" class=\"password-input\">\n    </div>\n    <div class=\"input-container\">\n      <input type=\"password\" placeholder=\"Confirmar clave nueva\" name=\"validatePassword\" id=\"validatePassword\" [(ngModel)]=\"validatePassword\" class=\"register-input\">\n    </div>\n    <div class=\"input-container\">\n      <button (click)=\"resetPassword()\" class=\"forgot-password-button\">Enviar</button>\n    </div>\n  </form>\n  <footer>\n    <p>&copy; Desafío Técnico Chek Agosto 2023 - Claudio Andrés Bascuñán Valdivia</p>\n  </footer>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
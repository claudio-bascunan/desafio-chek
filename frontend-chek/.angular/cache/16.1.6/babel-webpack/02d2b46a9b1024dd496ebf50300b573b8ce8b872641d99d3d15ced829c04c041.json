{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let HomeComponent = class HomeComponent {\n  constructor(router) {\n    this.router = router;\n    this.firstname = null;\n    this.logs = [];\n    this.sessionTimeout = 5 * 60 * 1000; // 5 minutos en milisegundos\n    this.isPageReloading = false;\n    this.currentPage = 1;\n    this.pageSize = 10;\n    this.totalPages = 1;\n  }\n  ngOnInit() {\n    window.addEventListener('unload', () => {\n      if (!this.isPageReloading) {\n        this.logout();\n      }\n    });\n    // Configurar un escuchador para el evento 'keydown' para detectar una recarga de página (F5)\n    window.addEventListener('keydown', event => {\n      if (event.key === 'F5') {\n        this.isPageReloading = true;\n      }\n      this.onActivity();\n    });\n    window.addEventListener('click', () => {\n      this.onActivity();\n    });\n    // Obtener el firstname y los logs desde el token almacenado en el LocalStorage\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      const tokenData = JSON.parse(atob(token.split('.')[1]));\n      this.firstname = tokenData.firstname;\n      this.logs = tokenData.logs || []; // Si el token no contiene datos de logs, se establece un arreglo vacío\n    }\n\n    this.calculateTotalPages();\n    this.startSessionTimeout();\n  }\n  calculateTotalPages() {\n    this.totalPages = Math.ceil(this.logs.length / this.pageSize);\n  }\n  goToPage(pageNumber) {\n    if (pageNumber >= 1 && pageNumber <= this.totalPages) {\n      this.currentPage = pageNumber;\n    }\n  }\n  getPaginatedLogs() {\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    const endIndex = startIndex + this.pageSize;\n    return this.logs.slice(startIndex, endIndex);\n  }\n  logout() {\n    // Elimina el token de acceso del LocalStorage\n    localStorage.removeItem('access_token');\n    setTimeout(() => {}, 500);\n    // Muestra una alerta de cierre de sesión si el usuario cierra sesión manualmente\n    // Redirige al usuario a la página de inicio de sesión (\"/login\") después de cerrar sesión\n    this.router.navigate(['/login']);\n  }\n  onActivity() {\n    clearTimeout(this.timeoutId); // Reinicia el temporizador\n    this.startSessionTimeout(); // Establece el nuevo temporizador\n  }\n\n  startSessionTimeout() {\n    this.timeoutId = setTimeout(() => this.logout(), this.sessionTimeout);\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);","map":{"version":3,"names":["Component","HomeComponent","constructor","router","firstname","logs","sessionTimeout","isPageReloading","currentPage","pageSize","totalPages","ngOnInit","window","addEventListener","logout","event","key","onActivity","token","localStorage","getItem","tokenData","JSON","parse","atob","split","calculateTotalPages","startSessionTimeout","Math","ceil","length","goToPage","pageNumber","getPaginatedLogs","startIndex","endIndex","slice","removeItem","setTimeout","navigate","clearTimeout","timeoutId","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Claudio\\Desktop\\pruebas_tecnicas\\Chek\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, HostListener, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\ninterface LogData {\n  date_time: string;\n  status: string;\n}\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n  firstname: string | null = null;\n  logs: LogData[] = [];\n  private sessionTimeout = 5 * 60 * 1000; // 5 minutos en milisegundos\n  private timeoutId: any; // Usa 'any' para el tipo del temporizador\n  private isPageReloading = false;\n  currentPage: number = 1;\n  pageSize: number = 10;\n  totalPages: number = 1;\n\n  constructor(private router: Router) {}\n\n  ngOnInit(): void {\n    window.addEventListener('unload', () => {\n      if (!this.isPageReloading) {\n        this.logout();\n      }\n    });\n\n    // Configurar un escuchador para el evento 'keydown' para detectar una recarga de página (F5)\n    window.addEventListener('keydown', (event) => {\n      if (event.key === 'F5') {\n        this.isPageReloading = true;\n      }\n      this.onActivity();\n    });\n\n    window.addEventListener('click', () => {\n      this.onActivity();\n    });\n\n    // Obtener el firstname y los logs desde el token almacenado en el LocalStorage\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      const tokenData = JSON.parse(atob(token.split('.')[1]));\n      this.firstname = tokenData.firstname;\n      this.logs = tokenData.logs || []; // Si el token no contiene datos de logs, se establece un arreglo vacío\n    }\n\n    this.calculateTotalPages();\n    this.startSessionTimeout();\n  }\n\n  calculateTotalPages(): void {\n    this.totalPages = Math.ceil(this.logs.length / this.pageSize);\n  }\n\n  goToPage(pageNumber: number): void {\n    if (pageNumber >= 1 && pageNumber <= this.totalPages) {\n      this.currentPage = pageNumber;\n    }\n  }\n\n  getPaginatedLogs(): LogData[] {\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    const endIndex = startIndex + this.pageSize;\n    return this.logs.slice(startIndex, endIndex);\n  }\n\n  logout(): void {\n    // Elimina el token de acceso del LocalStorage\n    localStorage.removeItem('access_token');\n\n    setTimeout(() => {\n    }, 500);\n    // Muestra una alerta de cierre de sesión si el usuario cierra sesión manualmente\n\n    // Redirige al usuario a la página de inicio de sesión (\"/login\") después de cerrar sesión\n    this.router.navigate(['/login']);\n  }\n\n  onActivity(): void {\n    clearTimeout(this.timeoutId); // Reinicia el temporizador\n    this.startSessionTimeout(); // Establece el nuevo temporizador\n  }\n\n  startSessionTimeout(): void {\n    this.timeoutId = setTimeout(() => this.logout(), this.sessionTimeout);\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAA8B,eAAe;AAaxD,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAUxBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAT1B,KAAAC,SAAS,GAAkB,IAAI;IAC/B,KAAAC,IAAI,GAAc,EAAE;IACZ,KAAAC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IAEhC,KAAAC,eAAe,GAAG,KAAK;IAC/B,KAAAC,WAAW,GAAW,CAAC;IACvB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,UAAU,GAAW,CAAC;EAEe;EAErCC,QAAQA,CAAA;IACNC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,MAAK;MACrC,IAAI,CAAC,IAAI,CAACN,eAAe,EAAE;QACzB,IAAI,CAACO,MAAM,EAAE;;IAEjB,CAAC,CAAC;IAEF;IACAF,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAGE,KAAK,IAAI;MAC3C,IAAIA,KAAK,CAACC,GAAG,KAAK,IAAI,EAAE;QACtB,IAAI,CAACT,eAAe,GAAG,IAAI;;MAE7B,IAAI,CAACU,UAAU,EAAE;IACnB,CAAC,CAAC;IAEFL,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAK;MACpC,IAAI,CAACI,UAAU,EAAE;IACnB,CAAC,CAAC;IAEF;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAClD,IAAIF,KAAK,EAAE;MACT,MAAMG,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACvD,IAAI,CAACrB,SAAS,GAAGiB,SAAS,CAACjB,SAAS;MACpC,IAAI,CAACC,IAAI,GAAGgB,SAAS,CAAChB,IAAI,IAAI,EAAE,CAAC,CAAC;;;IAGpC,IAAI,CAACqB,mBAAmB,EAAE;IAC1B,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEAD,mBAAmBA,CAAA;IACjB,IAAI,CAAChB,UAAU,GAAGkB,IAAI,CAACC,IAAI,CAAC,IAAI,CAACxB,IAAI,CAACyB,MAAM,GAAG,IAAI,CAACrB,QAAQ,CAAC;EAC/D;EAEAsB,QAAQA,CAACC,UAAkB;IACzB,IAAIA,UAAU,IAAI,CAAC,IAAIA,UAAU,IAAI,IAAI,CAACtB,UAAU,EAAE;MACpD,IAAI,CAACF,WAAW,GAAGwB,UAAU;;EAEjC;EAEAC,gBAAgBA,CAAA;IACd,MAAMC,UAAU,GAAG,CAAC,IAAI,CAAC1B,WAAW,GAAG,CAAC,IAAI,IAAI,CAACC,QAAQ;IACzD,MAAM0B,QAAQ,GAAGD,UAAU,GAAG,IAAI,CAACzB,QAAQ;IAC3C,OAAO,IAAI,CAACJ,IAAI,CAAC+B,KAAK,CAACF,UAAU,EAAEC,QAAQ,CAAC;EAC9C;EAEArB,MAAMA,CAAA;IACJ;IACAK,YAAY,CAACkB,UAAU,CAAC,cAAc,CAAC;IAEvCC,UAAU,CAAC,MAAK,CAChB,CAAC,EAAE,GAAG,CAAC;IACP;IAEA;IACA,IAAI,CAACnC,MAAM,CAACoC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAtB,UAAUA,CAAA;IACRuB,YAAY,CAAC,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACd,mBAAmB,EAAE,CAAC,CAAC;EAC9B;;EAEAA,mBAAmBA,CAAA;IACjB,IAAI,CAACc,SAAS,GAAGH,UAAU,CAAC,MAAM,IAAI,CAACxB,MAAM,EAAE,EAAE,IAAI,CAACR,cAAc,CAAC;EACvE;CACD;AA/EYL,aAAa,GAAAyC,UAAA,EALzB1C,SAAS,CAAC;EACT2C,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACW5C,aAAa,CA+EzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}